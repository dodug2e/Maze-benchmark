[tool.poetry]
name = "maze-benchmark"
version = "2.0.0"
description = "Lab-Seminar Edition - Extensible benchmark framework for maze-solving algorithms"
authors = ["Your Name <your.email@example.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/yourusername/maze-benchmark"
repository = "https://github.com/yourusername/maze-benchmark"
documentation = "https://yourusername.github.io/maze-benchmark"
keywords = ["maze", "benchmark", "reinforcement-learning", "algorithms", "isaac-sim"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

[tool.poetry.dependencies]
python = "^3.8"
# 핵심 의존성
numpy = "^1.24.0"
pillow = "^10.0.0"
click = "^8.1.0"
pyyaml = "^6.0"
omegaconf = "^2.3.0"
psutil = "^5.9.0"
matplotlib = "^3.7.0"
seaborn = "^0.12.0"
tqdm = "^4.65.0"
rich = "^13.3.0"

# 딥러닝 프레임워크
torch = "^2.0.0"
torchvision = "^0.15.0"
tensorflow = {version = "^2.12.0", optional = true}

# GPU 모니터링
pynvml = "^11.5.0"
nvidia-ml-py = "^12.535.0"

# 추가 ML 라이브러리
scikit-learn = "^1.3.0"
deep-forest = {version = "^0.1.7", optional = true}
gym = "^0.29.0"
stable-baselines3 = "^2.0.0"

# 데이터 처리
pandas = "^2.0.0"
h5py = "^3.9.0"

# 시각화 및 분석
plotly = "^5.15.0"
wandb = {version = "^0.15.0", optional = true}
tensorboard = "^2.13.0"

# 개발 도구
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
black = "^23.0.0"
isort = "^5.12.0"
flake8 = "^6.0.0"
mypy = "^1.5.0"
pre-commit = "^3.3.0"

# 문서화
mkdocs = "^1.5.0"
mkdocs-material = "^9.1.0"
mkdocs-jupyter = "^0.24.0"

[tool.poetry.extras]
tensorflow = ["tensorflow"]
deepforest = ["deep-forest"]
wandb = ["wandb"]
full = ["tensorflow", "deep-forest", "wandb"]

[tool.poetry.group.dev.dependencies]
jupyter = "^1.0.0"
ipykernel = "^6.24.0"
jupyterlab = "^4.0.0"
notebook = "^7.0.0"

[tool.poetry.scripts]
maze-benchmark = "maze_runner:main"
maze-train = "scripts.train:main"
maze-profile = "scripts.profile:main"
maze-visualize = "scripts.visualize:main"
maze-inspect = "scripts.inspect_dataset:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | datasets
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["maze_benchmark", "algorithms", "utils", "scripts"]
skip_glob = ["datasets/*"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "E501", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    "datasets",
    ".venv",
    ".env"
]
per-file-ignores = [
    "__init__.py:F401",
    "test_*.py:S101"
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
exclude = [
    "datasets/",
    "build/",
    "dist/"
]

[[tool.mypy.overrides]]
module = [
    "pynvml.*",
    "nvidia_ml_py.*",
    "deep_forest.*",
    "gym.*",
    "stable_baselines3.*",
    "wandb.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--cov=utils",
    "--cov=algorithms",
    "--cov=scripts",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-fail-under=80"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "gpu: marks tests as requiring GPU",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests"
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]

[tool.coverage.run]
source = ["utils", "algorithms", "scripts"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "*/datasets/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"